# THIS IS THE LML DEFAULT CONFIGURATION! IT GIVES AN EXAMPLE FOR ALL
# CONFIGURATION ITEMS THAT LML KNOWS.
#
# PLEASE DONT EDIT THIS FILE!!!!!
#
# INSTEAD, CREATE ADDITIONAL CONFIGURATION FILES LIKE /etc/lml/*.conf
#
# The configuration is read with http://search.cpan.org/dist/Config-IniFiles, see there for what you can
# use in this config file. Where we say list of we mean that you can provide a single value OR a list (with <<EOF syntax).
# Templates are always given as multi-line value with <<EOF
#
[dhcp]
# trigger the DHCP server with this command after changing the host list
triggercommand=sudo /usr/sbin/service dhcp3-server force-reload
# this file is managed by lml and contains ISC dhcp3 host entries for each managed host
hostsfile=/etc/dhcp3/dhcp-hosts.conf
# this is the domain we need to append to the VM name to construct a valid FQDN
appenddomain=arc.int
# NOTE: DNS is managed entirely through the DHCP integration, hence no configuration items here.
# List of network label patterns for which we actually have to manage the DHCP server.
managed_networks=<<EOF
.*
EOF

[appenddomains]
# Per-network setting of appenddomain, overriding the default from [dhcp]
# example: ARC_NETWORK=dyn.arc.int

[gui]
# The GUI should filter the VM path, () denotes the part displayed to the user
# this removes the leading <datacenter-name>/vm>/ stuff from the display name
display_filter_vm_path=^[^/]+/vm(.*)$

# define a list of variables here. The pxelinux-proxy.pl script will take the KEY as
# the name of the TOKEN (in *.pxelinux files) and the VALUE as the token replacement
# Variables look like %%%kickstart_host%%%, variable names are case-insensitive
[proxy_variables]
# Example: kickstart_host=kickstart.arc.int

[pxelinux]
# redirect target if a VM passes all LML checks and is allowed to boot.
# think twice before changing this as pxelinux.0 uses that as a built-in default in case pxelinux.pl throws a 500
# set to 0 to disable redirecting
default_redirect=pxelinux.cfg/default
# redirect target for non-VMs (anything that LML cant find in the vSphere inventory)
# set to 0 to disable redirecting
unknown_redirect=pxelinux.cfg/default
# redirect target for VMs that dont match our networks
# set to 0 to disable redirecting
othervm_redirect=pxelinux.cfg/default

# pxelinux configuration for error screen
# QRIMAGE is replaced by the URL to a background image which contains the error details as a QR code
error_main= <<EOF
menu width 80
menu margin 0
menu helpmsgrow -1
menu color title        * #FFFFFFFF *
menu color border       * #00000000 #00000000 none
menu color sel          0 #ffffffff #00000000 none
menu color unsel        0 #ffffffff #00000000 none
menu color hotsel       0 #ffffffff #00000000 none

menu background QRIMAGE

ui bin/vesamenu.c32
noescape 1
allowoptions 0
prompt 0
timeout 0

EOF
# pxelinux configuration error tile prefix for error screen
error_title=ERROR REPORT FOR VM
# pxelinux configuration for error item on error screen
error_item= <<EOF
        kernel bin/reboot.c32
        text help
Please fix these issues and press ENTER to reboot and try again
        endtext
EOF

# template for qrdata forceboot target, URL will be replaced with the URL to the QR image
qrdata_template=<<EOF
# push the menu out of the screen
menu vshift -1
menu width 80
menu background URL
menu color title        * #FFFFFFFF *
menu color border       * #00000000 #00000000 none
menu color sel          0 #ffffffff #00000000 none
menu color unsel        0 #ffffffff #00000000 none
menu color hotsel       0 #ffffffff #00000000 none

menu vshift 5
#menu rows 13

label dummy
        menu label 
        kernel bin/reboot.c32

ui bin/vesamenu.c32
noescape 1
allowoptions 0
prompt 0
timeout 0
EOF

# template for fatal errors. MESSAGE will be replaced by the actual error message. Used with showfatalerrors=1
# set a force boot target of fatalerror to trigger a fatal error for testing purposes
fatalerror_template=<<EOF
menu width 80
menu color title        * #ff000000 #ffffffff
menu color border       * #00000000 #00000000 none
menu color sel          * #ff000000 #ffffffff none
menu color unsel        * #ff000000 #ffffffff none
menu color hotsel       * #ff000000 #ffffffff none
menu color help         * #ff000000 #ffffffff none
menu vshift 5
menu title A FATAL ERROR HAS HAPPENED
menu rows 2

ui bin/vesamenu.c32
noescape 1
allowoptions 0
prompt 0
timeout 0

label error
	menu label MESSAGE
        kernel bin/reboot.c32
        text help
Please stand up and call for help!
        endtext

EOF

# local path to pxelinux.cfg directory, needed for forceboot autodetection
# This is the local path for the URI given to pxelinux as TFTP path prefix
# dont include the pxelinux.cfg directory itself!
pxelinuxcfg_path=/var/www/boot

[forceboot]
# force boot profiles
# NOTE: fatalerror is used internally, but you can override it at the loss of the ability to trigger a fake fatal error
# NOTE: unmanaged is used internally and you cannot override it here. Unmanaged VMs should NOT PXE boot hence LML triggers a fatal error for them
# each profile simply maps to a pxelinux configuration file, for example:
# server=menu/server.centos5.txt

[hostrules]
# hostnames must match this Perl pattern
pattern=^[a-z]{6}[0-9]{3}$

# The group_pattern is used to identify similar vms by their name. When a vm will be
# created, the creation script will take care, that this vm is not going to an host with
# similar vm(s) on it. A brace is needed! If this parameter is not set or no braces are defined
# the distribution function will be deactivated.
group_pattern=[a-z]{3}([a-z]{3})[0-9]{3}

# You can define the assignment of vms here. Beginning with defining the rulesets here. The
# ruleset name will be used in front of the ruleset patterns to identify them
#vm_host_assignment=<<EOF
#tst_dev
#pro
#EOF

# This is an ruleset which allows all vms with dev or tst as the first three letters of their
# hostname on esx hosts with tst as the first three letters in the hostname
#tst_dev.vm_pattern=(dev|tst).*
#tst_dev.host_pattern=(tst).*

# This ruleset said, that only hosts with pro as the first threee letters in the hostname
# will be assigned to esx hosts with pro as the first three letters in their hostname
#pro.vm_pattern=(pro).*
#pro.host_pattern=(pro).*

# deactivate dns checks. Only do this, if you really need it
dnscheck=1

# List of DNS domains to check new hostnames against. Matching VMs are not allowed to boot. Never list DHCP.APPENDDOMAIN here!
dnscheckzones= <<EOF
some.zone
some.other.zone
EOF

[dnscheckzones]
# Optional additional DNS zones to check against set per network label
# Example:
# List of more DNS domains
# ARC_NETWORK=some.other.network

[modifyvm]
# modify the VM so that it can boot only via PXE
forcenetboot=1

[lml]
# where to keep lml internal data
datadir=/var/lib/lml
# should fatal errors be shown to the PXE boot client, this uses the fatalerror_template
# fatalerror is a builtin force boot target to trigger a fatal error for testing purposes
showfatalerrors=0
# should we fail on invalid forceboot targets
failoninvalidforceboot=1
# globally disable proxy
# It seems like LWP ignores the no_proxy setting for HTTPS. ATM the only workaround seems to be to
# disable proxy settings globally.
disableproxy=0

[vmscreenshot]
# enable vmscreenshot.pl
enabled=1
# allow server_push
server_push=1
# how long to wait between pushing images
push_delay=15
# how many images to push in a single request (push_delay * push_max = Amount of time you can watch a VM)
push_max=25

[vsphere]
server=devvcs01.iscout.local
username=vCenterService
password=********************
# default datacenter as target for new vms
datacenter=MY_DATACENTER
# default network(s) for new vms each line one network (no wildcards)
default_vm_networks=<<EOF
arc.int
EOF
# if you run this on VMA or on Windows then you can try to use pass through auth.
# However, this is an untested feature and might not work.
passthroughauth=0
# disable certificate checking
disablecertificatevalidation=0
# List of networks that a VM must be attached to (with at least one NIC) so that LML will care about it.
# the names can be also a perl regex (^ and $ is added, dont use them!)
networks=<<EOF
.*
EOF
# define the custom field name that contains a UNIX username to validate
contactuserid_field=Contact User ID
# the UNIX username must have a uid >= this one
contactuserid_minuid=1000
# define the custom field name that contains the VM expiry date
expires_field=Expires
# use european date format for expiry date field
expires_european=1
# Define a field that contains info about forced PXE boots (ON|OFF)
forceboot_field=Force Boot
# Define a field where the target for the forceboot is given
forceboot_target_field=Force Boot Target

[http]
# here you can set some options for http
# base_url= can be set to the http://<host>/<path> that should be prefixed to all LML scripts
# if it is not set, then LML will try to guess it.

[network_assignment]
# List of permitted VM name regex patterns for each network label. Patterns are case-sensitive and used in qr() as-is.
# Example:
# ARC_NETWORK=<<EOF
# ^is24
# EOF
# ARC_BACKUP_NETWORK=^backup.*

[new_vm]
# List of configured network assignments. This list describes the search order for vm network
# assignment. The assignment which has the first hit, will take precedence.
network_search_order=<<EOF
ARC_NETWORK
ARC_BACKUP_NETWORK
EOF

[vm_spec]
host_announcement=http://host.arc.int/hostname-package/hostname-%s.arc.int.rpm
host_spec=http://host.arc.int/configviewer/hosts/%s/data/vmProfile/esx.json

[backgroundimage]
# Customize the backgroundimage.pl script with a 400x150px png image
customimage=sorry.png
